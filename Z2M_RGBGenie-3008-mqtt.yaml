blueprint:
  name: Z2M MQTT - RGBGenie 3008/3009 v4.0
  description: |
    Управление RGBGenie ZB-3008/ZB-3009 через MQTT
    с поддержкой модификаторов и плавного диммирования
  domain: automation
  input:
    mqtt_topic:
      name: "MQTT Topic"
      description: "Основной топик устройства (например: zigbee2mqtt/ZB-3009)"
      selector:
        text:
    modifier_input:
      name: "Сущность-модификатор"
      description: "input_text для хранения активной группы (1-3)"
      selector:
        entity:
          domain: input_text
    light_1:
      name: "Группа света 1"
      selector:
        entity:
          domain: light
    light_2:
      name: "Группа света 2"
      selector:
        entity:
          domain: light
    light_3:
      name: "Группа света 3"
      selector:
        entity:
          domain: light
    force_brightness:
      name: "Фиксированная яркость"
      default: false
      selector:
        boolean:
    brightness:
      name: "Яркость по умолчанию"
      default: 50
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    min_brightness:
      name: "Минимальная яркость"
      default: 1
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

trigger:
  - platform: mqtt
    topic: !input mqtt_topic
    value_template: "{{ value_json.action if value_json.action != '' }}"

variables:
  command: "{{ trigger.payload }}"
  payload: "{{ trigger.payload_json }}"
  current_modifier: "{{ states(input.modifier_input) | default('3') }}"
  light_entity: >-
    {% if command in ['on','off'] %}
      {{ input.light_3 }}
    {% else %}
      {{ [input.light_1, input.light_2, input.light_3][(current_modifier|int(0)-1)] 
         if current_modifier|int(0) in [1,2,3] 
         else input.light_3 }}
    {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ command is regex_match('^recall_[123]$') }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: !input modifier_input
            data:
              value: "{{ command.split('_')[1] }}"

      - conditions:
          - condition: template
            value_template: "{{ command in ['on', 'off'] }}"
        sequence:
          - service: light.toggle
            data:
              entity_id: "{{ light_entity }}"
              transition: 1
              brightness_pct: >-
                {% if input.force_brightness and command == 'on' %}
                  {{ input.brightness }}
                {% endif %}

      - conditions:
          - condition: template
            value_template: "{{ command == 'color_move' }}"
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entity }}"
              transition: 1
              xy_color: 
                - "{{ payload.action_color.x }}"
                - "{{ payload.action_color.y }}"
          - service: input_text.set_value
            target:
              entity_id: !input modifier_input
            data:
              value: "3"

      - conditions:
          - condition: template
            value_template: "{{ command in ['brightness_move_up','brightness_move_down'] }}"
        sequence:
          - repeat:
              count: 15
              sequence:
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ command == 'brightness_move_up' }}"
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: "{{ light_entity }}"
                            brightness_step_pct: 10
                            transition: 0.3
                    - conditions:
                        - condition: template
                          value_template: >-
                            {{ ((state_attr(light_entity, 'brightness')|int(0)/255*100 -10) 
                            >= input.min_brightness) }}
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: "{{ light_entity }}"
                            brightness_step_pct: -10
                            transition: 0.3
                    - conditions: []
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: "{{ light_entity }}"
                            brightness_pct: "{{ input.min_brightness }}"
                            transition: 0.5
                - delay: "00:00:00.3"

      - conditions:
          - condition: template
            value_template: "{{ command == 'color_temperature_move' }}"
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entity }}"
              color_temp: "{{ payload.action_color_temperature }}"
              transition: 1

mode: queued
max: 10
